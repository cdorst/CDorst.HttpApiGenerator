using Microsoft.CodeAnalysis;

namespace CDorst.HttpApiGenerator.Builders;

internal static class ConstantTypesBuilder
{
    public static GeneratorExecutionContext AddConstantTypesSource(this GeneratorExecutionContext context)
    {
        context.AddSource("ISqlConnectionString.cs", @"// <auto-generated />
namespace GeneratedSource;

#nullable enable

internal interface ISqlConnectionString
{
    string ConnectionString { get; }
}
");

        context.AddSource("SqlConnectionString.cs", @"// <auto-generated />
namespace GeneratedSource;

#nullable enable

internal class SqlConnectionString : ISqlConnectionString
{
    public string ConnectionString { get; init; } = default!;
}
");

        context.AddSource("WebApplicationBuilderExtensions.cs", @"// <auto-generated />
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Mvc;
using Microsoft.OpenApi.Models;
using Serilog;

namespace GeneratedSource;

#nullable enable

static class WebApplicationBuilderExtensions
{
    public static WebApplication Setup(this WebApplicationBuilder builder)
    {
        // remove 'server: Kestrel' header
        builder.WebHost.ConfigureKestrel(options => options.AddServerHeader = false);

        // use Serilog logger
        Log.Logger = new LoggerConfiguration()
                .ReadFrom.Configuration(builder.Configuration)
                .CreateLogger();

        builder.WebHost.UseSerilog();

        // add health checks
        builder.Services.AddHealthChecks()
            .AddSqlServer(builder.Configuration.GetConnectionString(""DefaultConnection""));

        // add swagger UI
        builder.Services
            .AddEndpointsApiExplorer()
            .AddSwaggerGen(setup =>
            {
                setup.AddSecurityDefinition(""JWT Bearer"", new OpenApiSecurityScheme
                {
                    Name = ""Authorization"",
                    Type = SecuritySchemeType.ApiKey,
                    Scheme = ""Bearer"",
                    BearerFormat = ""JWT"",
                    In = ParameterLocation.Header,
                    Description = @""JWT Authorization header using the Bearer scheme.

Enter 'Bearer' [space] and then your token in the text input below.

Example: """"Bearer qwerty.asdfgh.zxcvbn\"""""",
                });
                setup.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = ""Bearer""
                            }
                        },
                        Array.Empty<string>()
                     }
                 });
            });

        // add SQL Server database connection string
        builder.Services.AddSingleton<ISqlConnectionString>(new SqlConnectionString 
        { 
            ConnectionString = builder.Configuration.GetConnectionString(""DefaultConnection"") 
        });

        // add memory cache & redis cache
        builder.Services
            .AddMemoryCache()
            .AddStackExchangeRedisCache(setup =>
            {
                setup.InstanceName = builder.Configuration[""Redis:InstanceName""];
            });

        // add JWT bearer auth
        builder.Services.AddAuthentication(options =>
        {
            options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
        }).AddJwtBearer(options =>
        {
            options.Authority = builder.Configuration[""Auth:Authority""];
            options.Audience = builder.Configuration[""Auth:Audience""];
        });

        // require authentication user
        builder.Services.AddAuthorization(configure =>
        {
            configure.AddPolicy(""Default"", policy =>
            {
                policy.RequireAuthenticatedUser();
                policy.AuthenticationSchemes = new List<string> { JwtBearerDefaults.AuthenticationScheme };
            });
        });

        var app = builder.Build();

        app.UseSerilogRequestLogging();

        app.MapSwagger(""/{documentName}/swagger.{json|yaml}"");
        app.UseSwaggerUI(setup =>
        {
            setup.RoutePrefix = """";
        });

        app.MapHealthChecks(""/health"");

        app.UseAuthentication();
        app.UseAuthorization();

        return app;
    }
}
");

        return context;
    }
}
